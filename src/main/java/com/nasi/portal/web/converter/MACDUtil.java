package com.nasi.portal.web.converter;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class MACDUtil {
 
    public static final String MACD = "MACD";
    
    public static final String DIF = "DIF";
    
    public static final String DEA = "DEA";

    //12日均值，用于DIF的被减数计算
    private static final int PERIOD_12 = 12;
    
    //24日均值，用于DIF的减数计算
    private static final int PERIOD_26 = 26;
    
    //9日均值，用于DEA的计算
    private static final int PERIOD_9 = 9;
    
    //5日均值
    private static final int PERIOD_5 = 5;
    
    //10日均值
    private static final int PERIOD_10 = 10;
    
    //20日均值
    private static final int PERIOD_20 = 20;
    
    //30日均值
    private static final int PERIOD_30 = 30;
    
    //60日均值
    private static final int PERIOD_60 = 60;
    
    static ExecutorService e = Executors.newFixedThreadPool(60);
    
    public static void main(String[] args) {
        
        
        List<Double> list = Arrays.asList(29.96,30.09,30.77,30.46,29.13,27.72,27.97,28.26,28.34,28.51,28.51,28.05,29.17,29.22,29.58,29.32,30.07,29.75,29.44,29.73,28.85,28.89,29.05,28.91,29.34,29.35,29.08,28.70,29.02,29.14,28.90,29.17,29.15,29.24,29.49,29.53,29.54,29.71,29.26,29.54,30.09,29.89,29.95,30.19,29.15,28.24,28.34,28.46,28.30,28.40,28.52,28.11,28.24,28.26,28.12,27.98,27.44,27.09,27.32,27.20,26.54,26.35,25.60,25.21,25.47,25.65,25.39,25.63,25.47,25.57,25.85,26.02,25.85,26.06,25.38,25.58,25.46,25.06,25.12,23.98,23.72,23.22,22.92,22.50,22.24,22.78,22.85,22.73,23.04,23.10,23.03,22.57,22.61,22.45,23.10,23.33,23.12,23.15,23.18,25.34,25.33,24.50,24.77,24.77,24.62,24.19,24.60,24.54,24.94,25.19,25.04,25.10,24.84,24.80,24.87,25.30,26.01,25.87,25.78,25.52,25.45,25.30,25.14,23.65,23.66,23.92,23.99,23.79,24.24,23.28,23.29,23.28,23.60,22.78,22.24,22.53,22.74,23.02,23.28,23.31,23.13,22.47,22.16,22.21,22.61,22.51,23.06,23.23,23.04,22.78,22.73,22.72,22.40,22.05,22.11,22.54,22.20,22.25,22.09,22.40,22.43,22.44,22.96,22.88,23.30,22.51,22.36,22.12,22.18,21.99,21.59,21.57,21.60,21.58,22.20,22.15,21.89,22.10,21.50,21.52,20.99,20.76,20.85,20.57,20.46,20.32,20.51,20.74,20.58,20.70,21.07,21.08,21.02,20.78,20.90,20.67,20.66,21.30,21.52,21.20,21.16,20.50,20.45,20.27,21.34,21.61,21.28,21.03,21.23,21.16,22.37,22.54,22.62,22.51,22.40,23.35,23.34,23.08,22.01,22.26,22.51,22.80,22.71,20.63,18.94,17.96,17.05,16.70,15.96,15.55,15.59,15.76,15.26,14.33,14.40,15.05,15.76,16.12,15.72,15.01,14.50,15.13,14.92,14.10,14.26,14.31,14.08,14.21,14.40,14.73,14.94,14.58,14.90,15.00,15.07,15.57,15.41,15.89,16.40,16.05,15.86,15.94,16.21,16.45,16.75,16.54,16.31,16.20,16.30,16.57,16.49,16.10,16.00,16.20,16.60,16.59,16.96,15.99,15.52,15.85,16.10,15.58,15.85,15.85,15.51,15.55,15.54,14.54,14.32,14.28,14.70,14.72,14.67,14.98,14.97,15.19,15.42,15.41,15.06,15.47,15.49,15.65,15.80,15.02,15.09,15.23,16.16,16.29,16.29,16.46,16.85,16.55,16.12,16.19,16.00,15.82,16.11,16.00,16.12,15.56,15.53,15.82,15.49,15.67,15.29,15.45,15.37,15.32,15.70,15.02,14.99,15.03,15.06,14.96,15.03,14.97,15.32,15.93,15.45,15.51,15.42,15.43,15.49,15.71,16.00,15.84,15.05,15.04,15.00,15.10,14.57,14.81,14.85,14.93,14.67,14.85,14.95,14.47,14.20,14.38,14.46,14.35,14.25,14.33,14.39,14.39,14.48,14.49,14.12,14.32,14.10,14.40,14.80,14.80,14.76,14.92,15.19,14.76,14.82,14.84,14.81,15.08,15.00,15.09,14.93,15.19,14.77,14.63,14.73,14.79,14.55,14.54,14.80,14.69,14.81,14.99,15.37,15.32,15.59,15.52,15.25,15.40,15.00,14.71,14.83,14.43,14.44,14.44,14.43,14.10,14.36,14.50,14.48,14.72,14.79,14.53,14.63,14.46,14.48,14.53,14.77,14.84,15.11,15.15,14.89,14.78,14.43,14.40,14.41,14.50,14.69,14.69,14.69,14.51,14.50,14.19,14.18,14.21,14.10,14.15,13.95,13.78,13.87,13.89,14.00,13.94,13.91,13.78,13.37,13.30,12.86,12.94,12.63,12.64,13.07,12.97,13.23,13.43,13.38,13.37,13.13,13.61,13.64,13.60,13.62,13.68,13.85,14.14,14.50,15.09,14.73,15.16,15.19,15.11,15.33,16.16,15.99,16.12,16.36,17.33,17.40,18.27,18.81,18.47,19.33,18.41,18.59,17.70,17.80,18.29,18.71,18.21,18.10,18.35,18.09,18.29,18.54,18.69,19.54,19.27,18.85,19.27,19.18,19.24,19.50,18.73,18.41,18.73,18.99,18.32,18.63,19.38,19.03,18.70,19.23,18.61,18.62,18.31,18.29,18.10,18.25,18.77,18.84,19.08,18.76,18.60,18.70,18.31,18.22,18.13, 8.82, 8.44, 8.15, 8.31, 8.19, 8.26, 8.10, 7.95, 7.85, 7.93, 8.39, 8.41, 8.26, 7.83, 7.98, 7.79, 7.75, 7.70, 7.87, 7.93, 7.93, 7.93, 7.79, 7.97, 8.00, 7.82, 7.95, 7.93, 8.05, 8.30, 8.46, 8.29, 8.28, 8.35, 8.86, 8.87, 8.90, 8.82, 8.54, 8.44, 8.22, 8.33, 8.16, 7.91, 7.64, 7.76, 7.75, 7.82, 7.84, 7.58, 7.35, 7.03, 7.69, 7.76, 7.29, 7.53, 7.51, 7.50, 7.30, 7.31, 7.22, 7.44, 7.35, 7.50, 7.68, 7.52, 7.60, 7.73, 7.59, 7.43, 7.78, 8.46, 8.95, 9.08, 8.90, 8.61, 8.71, 9.18, 9.02, 9.09, 9.45,10.02, 9.99,10.28,10.14,10.20, 9.89, 9.70, 9.40, 9.72, 9.86,10.01, 9.78, 9.56, 9.60, 9.43, 9.36, 9.44, 9.35, 9.28, 9.37, 9.50, 9.67, 9.52, 9.53, 9.31, 9.31, 9.21, 9.23, 9.23, 9.15, 9.58,10.30,10.00, 9.98, 9.90, 9.90,10.25,10.45,10.49,10.39,10.62,11.68,12.41,12.40,12.12,12.19,12.40,12.40,11.97,12.05,12.06,12.01,12.03,12.92,12.80,11.95,12.35,12.57,12.58,12.99,12.77,12.60,12.93,12.51,12.70,12.93,13.58,13.39,14.16,14.25,13.84,13.53,13.75,13.63,13.30,13.78,13.37,13.61,13.80,13.88,13.75,13.94,13.80,13.42,13.39,13.48,13.99,13.13,12.30,12.32,11.70,12.05,12.81,13.33,12.92,13.18,12.60,12.93,12.98,13.11,13.20,13.39,13.47,13.98,13.78,13.68,13.54,13.41,13.47,13.30,13.92,14.01,14.33,14.30,14.73,15.24,15.06,15.24,15.06,15.11,15.77,15.54,16.00,15.78,15.97,17.57,18.75,18.40,17.91,17.94,18.13,17.28,16.85,16.40,16.49,17.19,16.95,16.83,16.94,16.95,16.50,16.51,16.02,16.33,16.15,16.43,17.24,17.60,17.03,17.10,17.60,16.62,16.53,16.44,16.27,16.20,16.50,16.40,16.61,16.59,16.83,17.07,16.87,17.20,17.41,16.92,17.21,17.70,18.24,17.83,17.46,17.89,18.12,17.61,16.89,15.94,16.26,16.84,16.61,16.54,16.68,16.40,15.22,15.00,14.57,14.08,13.94,14.20,14.18,13.81,14.14,14.15,14.69,14.18,14.29,14.29,14.22,14.20,14.00,13.94,13.96,13.83,14.01,14.08,13.93,13.91,14.10,13.98,13.03,12.60,12.58,12.71,12.96,12.70,12.88,12.97,13.10,13.14,13.21,13.48,13.25,13.06,12.92,12.70,12.73,12.71,12.84,12.70,12.76,12.72,12.53,11.37,11.76,11.58,11.64,11.78,12.74,13.18,13.49,13.48,13.26,13.31,13.69,14.44,14.10,14.17,14.26,14.28,14.13,13.67,13.78,13.91,14.02,14.00,13.89,13.74,13.85,14.08,13.93,13.71,13.60,13.86,14.20,14.22,14.98,15.01,15.10,15.15,15.60,15.66,15.31,14.77,14.96,15.07,15.10,14.87,14.93,15.48,15.28,15.29,15.70,16.40,16.58,16.51,16.18,15.95,15.74,16.07,16.03,16.32,16.67,16.67,16.10,15.24,15.38,15.56,15.78,15.69,16.18,16.46,16.62,15.86,15.91,16.14,16.38,16.52,17.35,17.58,17.63,16.02,16.07,16.04,16.18,15.55,15.52,15.12,15.35,15.75,16.49,16.20,15.89,15.39,15.51,15.39,14.63,14.72,14.85,14.97,15.01,14.64,14.13,13.70,14.12,14.85,15.00,15.06,15.10,15.78,16.15,16.08,16.73,17.38,17.31,18.07,17.89,18.95,18.80,19.66,19.59,20.43,20.67,20.87,19.29,19.24,18.68,19.18,18.60,19.40,19.09,18.66,19.16,19.15,19.08,19.39,19.70,20.46,21.86,21.98,21.98,22.44,22.95,23.31,22.79,21.93,21.11,21.28,21.29,22.11,22.45,22.74,23.08,23.82,25.37,24.96,26.93,26.40,25.94,27.14,27.72,28.99,29.42,31.97,34.59,37.86,35.97,38.45,39.34,36.64,32.98,33.34,32.49,30.30,33.32,33.90,33.37,32.44,32.66,30.96,31.55,32.29,33.29,31.51,31.89,33.52,34.75,37.15,36.66,15.48,14.59,13.89,13.97,14.41,14.54,15.21,16.73,17.00,17.15,18.18,16.36,15.71,16.25,17.35,16.79,16.45,16.73,16.40,16.25,16.32,16.96,16.73,16.10,14.94,15.14,14.91,13.42,13.24,13.54,12.69,11.42,10.28,10.74, 9.67, 8.70, 7.83, 7.58, 6.82, 7.50, 8.25, 8.16, 8.39, 9.23, 9.94,10.14,10.02,10.28);
        
        long a = new Date().getTime();
        for (int i = list.size() - 1; i >= 0; i--) {
            final List<Double>  sublist = list.subList(0, list.size() - i);   
            
            Thread t = new Thread(){
              @Override
              public void run() {
                  System.out.println(getMACD(sublist).get("DEA"));
              }  
            };
            
            e.submit(t);
        
        }
        e.shutdown();
        
        while (true) {
            if (e.isTerminated()) {
                long b = new Date().getTime();
                System.out.println(b - a);
                break;
            }
        }
        
        
        
        
    }
    
    /**
     * 
     * @param list 价格区间
     * @param number n Day 均值
     * @return
     */
    // 开始计算EMA值，  
    public static final Double getEMA(final List<Double> list, final int number) {  
        
        // 计算出权重系数 k=2/(n+1)  
        Double k = 2.0 / (number + 1.0);
        // 第一天的ema等于当天价格  
        Double ema = list.get(0);
        
        for (int i = 1; i < list.size(); i++) {  
            // ema = 价格*k + 昨天的ema*(1-k)
            ema = list.get(i) * k + ema * (1 - k);  
        }  
        return ema;
    }
    
    /**
     * 5日平滑均值
     * @param list
     * @return
     */
    public static final Double getEMA5(final List<Double> list){
        return getEMA(list, PERIOD_5);
    }
    
    /**
     * 10日平滑均值
     * @param list
     * @return
     */
    public static final Double getEMA10(final List<Double> list){
        return getEMA(list, PERIOD_10);
    }
    
    /**
     * 20日平滑均值
     * @param list
     * @return
     */
    public static final Double getEMA20(final List<Double> list){
        return getEMA(list, PERIOD_20);
    }
    
    /**
     * 30日平滑均值
     * @param list
     * @return
     */
    public static final Double getEMA30(final List<Double> list){
        return getEMA(list, PERIOD_30);
    }
    
    /**
     * 60日平滑均值
     * @param list
     * @return
     */
    public static final Double getEMA60(final List<Double> list){
        return getEMA(list, PERIOD_60);
    }
   
    /**
     * 计算MACD指标
     * @param list
     * @param shortPeriod -- 12
     * @param longPeriod -- 26
     * @param midPeriod -- 9
     * @return
     */
    public static final HashMap<String, Double> getMACD(final List<Double> list, final int shortPeriod, final int longPeriod, int midPeriod) {  
        HashMap<String, Double> macdData = new HashMap<String, Double>();  
        List<Double> diffList = new ArrayList<Double>();  
        //短期均值
        Double shortEMA = 0.0;  
        //长期均值
        Double longEMA = 0.0;  
        Double dif = 0.0;  
        Double dea = 0.0;  
      
        for (int i = list.size() - 1; i >= 0; i--) {  
            List<Double> sublist = list.subList(0, list.size() - i);  
            
            shortEMA = getEMA(sublist, shortPeriod);  
            longEMA = getEMA(sublist, longPeriod);  
            
            //EMA(12) - EMA(26)
            dif = shortEMA - longEMA;  
            diffList.add(dif);  
        }  
        
        //DEA= 昨天的DEA × 8/10 + 当天的DIF × 2/10
        dea = getEMA(diffList, midPeriod);  
        macdData.put(DIF, dif);  
        macdData.put(DEA, dea);  
        //MACD = 2 × (DIF - DEA)
        macdData.put(MACD, (dif - dea) * 2);  
        return macdData;  
    }  
    
    /**
     * 标准化MACD的获取
     * @param list
     * @return
     */
    public static final HashMap<String, Double> getMACD(final List<Double> list) {  
        return getMACD(list, PERIOD_12, PERIOD_26, PERIOD_9);  
    } 
    
}
