<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nasi.portal.data.mapper.CourseArrangeNewMapper" >
  <resultMap id="BaseResultMap" type="com.nasi.portal.data.model.CourseArrangeNew" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="campus_id" property="campusId" jdbcType="BIGINT" />
    <result column="school_name_cn" property="schoolNameCn" jdbcType="VARCHAR" />
    <result column="school_name_en" property="schoolNameEn" jdbcType="VARCHAR" />
    <result column="course_id" property="courseId" jdbcType="INTEGER" />
    <result column="course_name" property="courseName" jdbcType="VARCHAR" />
    <result column="course_code" property="courseCode" jdbcType="VARCHAR" />
    <result column="professor_id" property="professorId" jdbcType="INTEGER" />
    <result column="professor_name_cn" property="professorNameCn" jdbcType="VARCHAR" />
    <result column="professor_name_en" property="professorNameEn" jdbcType="VARCHAR" />
    <result column="professor_from_school_cn" property="professorFromSchoolCn" jdbcType="VARCHAR" />
    <result column="professor_from_school_en" property="professorFromSchoolEn" jdbcType="VARCHAR" />
    <result column="start_time" property="startTime" jdbcType="TIME" />
    <result column="end_time" property="endTime" jdbcType="TIME" />
    <result column="course_attach" property="courseAttach" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
    <result column="create_user" property="createUser" jdbcType="INTEGER" />
    <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
    <result column="update_user" property="updateUser" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="price" property="price" jdbcType="BIGINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, campus_id, school_name_cn, school_name_en, course_id, course_name, course_code, 
    professor_id, professor_name_cn, professor_name_en, professor_from_school_cn, professor_from_school_en, 
    start_time, end_time, course_attach, create_time, create_user, update_time, update_user, 
    status, price
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.nasi.portal.data.model.CourseArrangeNewExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from course_arrange_new
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from course_arrange_new
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from course_arrange_new
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.nasi.portal.data.model.CourseArrangeNewExample" >
    delete from course_arrange_new
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.nasi.portal.data.model.CourseArrangeNew" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into course_arrange_new (campus_id, school_name_cn, school_name_en, 
      course_id, course_name, course_code, 
      professor_id, professor_name_cn, professor_name_en, 
      professor_from_school_cn, professor_from_school_en, 
      start_time, end_time, course_attach, 
      create_time, create_user, update_time, 
      update_user, status, price
      )
    values (#{campusId,jdbcType=BIGINT}, #{schoolNameCn,jdbcType=VARCHAR}, #{schoolNameEn,jdbcType=VARCHAR}, 
      #{courseId,jdbcType=INTEGER}, #{courseName,jdbcType=VARCHAR}, #{courseCode,jdbcType=VARCHAR}, 
      #{professorId,jdbcType=INTEGER}, #{professorNameCn,jdbcType=VARCHAR}, #{professorNameEn,jdbcType=VARCHAR}, 
      #{professorFromSchoolCn,jdbcType=VARCHAR}, #{professorFromSchoolEn,jdbcType=VARCHAR}, 
      #{startTime,jdbcType=TIME}, #{endTime,jdbcType=TIME}, #{courseAttach,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}, #{createUser,jdbcType=INTEGER}, #{updateTime,jdbcType=TIMESTAMP}, 
      #{updateUser,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{price,jdbcType=BIGINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.nasi.portal.data.model.CourseArrangeNew" >
    <selectKey resultType="java.lang.Long" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into course_arrange_new
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="campusId != null" >
        campus_id,
      </if>
      <if test="schoolNameCn != null" >
        school_name_cn,
      </if>
      <if test="schoolNameEn != null" >
        school_name_en,
      </if>
      <if test="courseId != null" >
        course_id,
      </if>
      <if test="courseName != null" >
        course_name,
      </if>
      <if test="courseCode != null" >
        course_code,
      </if>
      <if test="professorId != null" >
        professor_id,
      </if>
      <if test="professorNameCn != null" >
        professor_name_cn,
      </if>
      <if test="professorNameEn != null" >
        professor_name_en,
      </if>
      <if test="professorFromSchoolCn != null" >
        professor_from_school_cn,
      </if>
      <if test="professorFromSchoolEn != null" >
        professor_from_school_en,
      </if>
      <if test="startTime != null" >
        start_time,
      </if>
      <if test="endTime != null" >
        end_time,
      </if>
      <if test="courseAttach != null" >
        course_attach,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="createUser != null" >
        create_user,
      </if>
      <if test="updateTime != null" >
        update_time,
      </if>
      <if test="updateUser != null" >
        update_user,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="price != null" >
        price,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="campusId != null" >
        #{campusId,jdbcType=BIGINT},
      </if>
      <if test="schoolNameCn != null" >
        #{schoolNameCn,jdbcType=VARCHAR},
      </if>
      <if test="schoolNameEn != null" >
        #{schoolNameEn,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        #{courseId,jdbcType=INTEGER},
      </if>
      <if test="courseName != null" >
        #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseCode != null" >
        #{courseCode,jdbcType=VARCHAR},
      </if>
      <if test="professorId != null" >
        #{professorId,jdbcType=INTEGER},
      </if>
      <if test="professorNameCn != null" >
        #{professorNameCn,jdbcType=VARCHAR},
      </if>
      <if test="professorNameEn != null" >
        #{professorNameEn,jdbcType=VARCHAR},
      </if>
      <if test="professorFromSchoolCn != null" >
        #{professorFromSchoolCn,jdbcType=VARCHAR},
      </if>
      <if test="professorFromSchoolEn != null" >
        #{professorFromSchoolEn,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        #{startTime,jdbcType=TIME},
      </if>
      <if test="endTime != null" >
        #{endTime,jdbcType=TIME},
      </if>
      <if test="courseAttach != null" >
        #{courseAttach,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="price != null" >
        #{price,jdbcType=BIGINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.nasi.portal.data.model.CourseArrangeNewExample" resultType="java.lang.Integer" >
    select count(*) from course_arrange_new
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update course_arrange_new
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.campusId != null" >
        campus_id = #{record.campusId,jdbcType=BIGINT},
      </if>
      <if test="record.schoolNameCn != null" >
        school_name_cn = #{record.schoolNameCn,jdbcType=VARCHAR},
      </if>
      <if test="record.schoolNameEn != null" >
        school_name_en = #{record.schoolNameEn,jdbcType=VARCHAR},
      </if>
      <if test="record.courseId != null" >
        course_id = #{record.courseId,jdbcType=INTEGER},
      </if>
      <if test="record.courseName != null" >
        course_name = #{record.courseName,jdbcType=VARCHAR},
      </if>
      <if test="record.courseCode != null" >
        course_code = #{record.courseCode,jdbcType=VARCHAR},
      </if>
      <if test="record.professorId != null" >
        professor_id = #{record.professorId,jdbcType=INTEGER},
      </if>
      <if test="record.professorNameCn != null" >
        professor_name_cn = #{record.professorNameCn,jdbcType=VARCHAR},
      </if>
      <if test="record.professorNameEn != null" >
        professor_name_en = #{record.professorNameEn,jdbcType=VARCHAR},
      </if>
      <if test="record.professorFromSchoolCn != null" >
        professor_from_school_cn = #{record.professorFromSchoolCn,jdbcType=VARCHAR},
      </if>
      <if test="record.professorFromSchoolEn != null" >
        professor_from_school_en = #{record.professorFromSchoolEn,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null" >
        start_time = #{record.startTime,jdbcType=TIME},
      </if>
      <if test="record.endTime != null" >
        end_time = #{record.endTime,jdbcType=TIME},
      </if>
      <if test="record.courseAttach != null" >
        course_attach = #{record.courseAttach,jdbcType=VARCHAR},
      </if>
      <if test="record.createTime != null" >
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createUser != null" >
        create_user = #{record.createUser,jdbcType=INTEGER},
      </if>
      <if test="record.updateTime != null" >
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateUser != null" >
        update_user = #{record.updateUser,jdbcType=INTEGER},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.price != null" >
        price = #{record.price,jdbcType=BIGINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update course_arrange_new
    set id = #{record.id,jdbcType=BIGINT},
      campus_id = #{record.campusId,jdbcType=BIGINT},
      school_name_cn = #{record.schoolNameCn,jdbcType=VARCHAR},
      school_name_en = #{record.schoolNameEn,jdbcType=VARCHAR},
      course_id = #{record.courseId,jdbcType=INTEGER},
      course_name = #{record.courseName,jdbcType=VARCHAR},
      course_code = #{record.courseCode,jdbcType=VARCHAR},
      professor_id = #{record.professorId,jdbcType=INTEGER},
      professor_name_cn = #{record.professorNameCn,jdbcType=VARCHAR},
      professor_name_en = #{record.professorNameEn,jdbcType=VARCHAR},
      professor_from_school_cn = #{record.professorFromSchoolCn,jdbcType=VARCHAR},
      professor_from_school_en = #{record.professorFromSchoolEn,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIME},
      end_time = #{record.endTime,jdbcType=TIME},
      course_attach = #{record.courseAttach,jdbcType=VARCHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      create_user = #{record.createUser,jdbcType=INTEGER},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      update_user = #{record.updateUser,jdbcType=INTEGER},
      status = #{record.status,jdbcType=INTEGER},
      price = #{record.price,jdbcType=BIGINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.nasi.portal.data.model.CourseArrangeNew" >
    update course_arrange_new
    <set >
      <if test="campusId != null" >
        campus_id = #{campusId,jdbcType=BIGINT},
      </if>
      <if test="schoolNameCn != null" >
        school_name_cn = #{schoolNameCn,jdbcType=VARCHAR},
      </if>
      <if test="schoolNameEn != null" >
        school_name_en = #{schoolNameEn,jdbcType=VARCHAR},
      </if>
      <if test="courseId != null" >
        course_id = #{courseId,jdbcType=INTEGER},
      </if>
      <if test="courseName != null" >
        course_name = #{courseName,jdbcType=VARCHAR},
      </if>
      <if test="courseCode != null" >
        course_code = #{courseCode,jdbcType=VARCHAR},
      </if>
      <if test="professorId != null" >
        professor_id = #{professorId,jdbcType=INTEGER},
      </if>
      <if test="professorNameCn != null" >
        professor_name_cn = #{professorNameCn,jdbcType=VARCHAR},
      </if>
      <if test="professorNameEn != null" >
        professor_name_en = #{professorNameEn,jdbcType=VARCHAR},
      </if>
      <if test="professorFromSchoolCn != null" >
        professor_from_school_cn = #{professorFromSchoolCn,jdbcType=VARCHAR},
      </if>
      <if test="professorFromSchoolEn != null" >
        professor_from_school_en = #{professorFromSchoolEn,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null" >
        start_time = #{startTime,jdbcType=TIME},
      </if>
      <if test="endTime != null" >
        end_time = #{endTime,jdbcType=TIME},
      </if>
      <if test="courseAttach != null" >
        course_attach = #{courseAttach,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createUser != null" >
        create_user = #{createUser,jdbcType=INTEGER},
      </if>
      <if test="updateTime != null" >
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateUser != null" >
        update_user = #{updateUser,jdbcType=INTEGER},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="price != null" >
        price = #{price,jdbcType=BIGINT},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nasi.portal.data.model.CourseArrangeNew" >
    update course_arrange_new
    set campus_id = #{campusId,jdbcType=BIGINT},
      school_name_cn = #{schoolNameCn,jdbcType=VARCHAR},
      school_name_en = #{schoolNameEn,jdbcType=VARCHAR},
      course_id = #{courseId,jdbcType=INTEGER},
      course_name = #{courseName,jdbcType=VARCHAR},
      course_code = #{courseCode,jdbcType=VARCHAR},
      professor_id = #{professorId,jdbcType=INTEGER},
      professor_name_cn = #{professorNameCn,jdbcType=VARCHAR},
      professor_name_en = #{professorNameEn,jdbcType=VARCHAR},
      professor_from_school_cn = #{professorFromSchoolCn,jdbcType=VARCHAR},
      professor_from_school_en = #{professorFromSchoolEn,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIME},
      end_time = #{endTime,jdbcType=TIME},
      course_attach = #{courseAttach,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      create_user = #{createUser,jdbcType=INTEGER},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      update_user = #{updateUser,jdbcType=INTEGER},
      status = #{status,jdbcType=INTEGER},
      price = #{price,jdbcType=BIGINT}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="getCourseByid"  resultType="map">
    select * from course_arrange_new
    <where>
      <foreach collection="array" item="ids" index="index" open="and id in(" close=")" separator=",">
        #{ids}
      </foreach>
    </where>
  </select>
</mapper>